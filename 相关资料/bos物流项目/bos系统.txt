项目总结：
使用接口的好处  
spring帮我们生成的是代理对象  和原始对象一样都继承同一个接口
1、@Autowired
private IFunctionDao dao;//一定是接口不能是实现类（因为spring帮你们生成的是代理对象
2.在webservice的时候也是生成代理对象 


什么是热部署：
就是当你重编译之后自动把编译之后的文件部署到tomcat中（需要开启自动编译）
哪些框架有：
struts2在配置文件中可以设置开发者模式 只在struts配置文件有用
springboot项目中
插件，jar包


有关外键的问题：总结就是尽量不要使用外键，通过程序来控制数据的完整性
1：在大数量的情况下，使用外键约束会导致很差的性能。一般互联网应想都不要去想外键这种东西了，连表连接查询最好都不要使用
2：大数据量时进行表的水平切分，像外键约束、触发器、存储过程这些都是禁区
3：数据完整性是业务的需要，因此得由业务层的应用程序来控制
4：外键会导致表结构非常混乱，几乎是动都不能去动，一层套一层的外键约束，在表很多的情况下很可能会导致循环约束



关联的作用就在帮助我们搞清牢记（如果我改动一个表，相关联的表也会受影响）

任务：
系统管理
1.删除用户，删除角色，删除权限

2.根据不同的用户来展示不同的页面

3.使用shrio来控制认证和授权


基础档案：
取派员管理：
删除取派员，还原取派员（通过删除标记来控制），查询取派员

区域设置：
导入数据（有就更新没有就插入），批量删除数据  添加修改区域   查询

分区：
导入，导出 添加  删除/修改  查询

定区：
添加  删除  修改（换取派员  添加分区或是减少分区）  关联客户
定区绑定分区和分配取派员

收派标准：是一个网页



受理
添加工单 并分配取派员上门取件
工作单快速记录  修改   删除

工作单导出
工单导出
通知单导出




业务；理解解释
区域  分区  定区  取派员的关系？
表与表之间的关系：
一个取派员负责多个定区   	定区有收派员的外键
一个定区有好多个分区      	分区有定区和区域的外键
一个区域也有好多个分区     分区有区域的外键
定区表:（集合了多个小区）
区域表：（都是表示具体地方区域的字段 具体使用看情况） 青山湖区
分区表：(小区)


工作单，工单，业务通知单
业务通知单：（客户 商品的一些信息）  
工作单（寄件人，收件人，以及商品的一些信息)
工单（工单的一些基本信息  取派员外键  通知单外键）











